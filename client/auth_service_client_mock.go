// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/taehoio/idl/gen/go/taehoio/idl/services/auth/v1 (interfaces: AuthServiceClient)

// Package client is a generated GoMock package.
package client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"

	authv1 "github.com/taehoio/idl/gen/go/taehoio/idl/services/auth/v1"
)

// MockAuthServiceClient is a mock of AuthServiceClient interface.
type MockAuthServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServiceClientMockRecorder
}

// MockAuthServiceClientMockRecorder is the mock recorder for MockAuthServiceClient.
type MockAuthServiceClientMockRecorder struct {
	mock *MockAuthServiceClient
}

// NewMockAuthServiceClient creates a new mock instance.
func NewMockAuthServiceClient(ctrl *gomock.Controller) *MockAuthServiceClient {
	mock := &MockAuthServiceClient{ctrl: ctrl}
	mock.recorder = &MockAuthServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServiceClient) EXPECT() *MockAuthServiceClientMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockAuthServiceClient) Auth(arg0 context.Context, arg1 *authv1.AuthRequest, arg2 ...grpc.CallOption) (*authv1.AuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Auth", varargs...)
	ret0, _ := ret[0].(*authv1.AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockAuthServiceClientMockRecorder) Auth(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockAuthServiceClient)(nil).Auth), varargs...)
}

// AuthByRefreshToken mocks base method.
func (m *MockAuthServiceClient) AuthByRefreshToken(arg0 context.Context, arg1 *authv1.AuthByRefreshTokenRequest, arg2 ...grpc.CallOption) (*authv1.AuthByRefreshTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AuthByRefreshToken", varargs...)
	ret0, _ := ret[0].(*authv1.AuthByRefreshTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthByRefreshToken indicates an expected call of AuthByRefreshToken.
func (mr *MockAuthServiceClientMockRecorder) AuthByRefreshToken(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthByRefreshToken", reflect.TypeOf((*MockAuthServiceClient)(nil).AuthByRefreshToken), varargs...)
}

// HealthCheck mocks base method.
func (m *MockAuthServiceClient) HealthCheck(arg0 context.Context, arg1 *authv1.HealthCheckRequest, arg2 ...grpc.CallOption) (*authv1.HealthCheckResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "HealthCheck", varargs...)
	ret0, _ := ret[0].(*authv1.HealthCheckResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockAuthServiceClientMockRecorder) HealthCheck(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockAuthServiceClient)(nil).HealthCheck), varargs...)
}

// ParseToken mocks base method.
func (m *MockAuthServiceClient) ParseToken(arg0 context.Context, arg1 *authv1.ParseTokenRequest, arg2 ...grpc.CallOption) (*authv1.ParseTokenResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{arg0, arg1}
	for _, a := range arg2 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ParseToken", varargs...)
	ret0, _ := ret[0].(*authv1.ParseTokenResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAuthServiceClientMockRecorder) ParseToken(arg0, arg1 interface{}, arg2 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{arg0, arg1}, arg2...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAuthServiceClient)(nil).ParseToken), varargs...)
}
